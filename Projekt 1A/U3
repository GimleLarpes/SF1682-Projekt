%% a) 

function ds=fvel(t, s, b, aL, aR, wL, wR)
    x = s(1);
    y = s(2);
    theta = s(3);
    vR = aR*t + wR;
    vL = aL*t + wL;
    v = (vR + vL)/2;

    dx = v*cos(theta);
    dy = v*sin(theta);

    dtheta = (vR - vL)/b;

    ds = [dx; dy; dtheta];
end




%% b) Skriv ett MATLAB-program som anvander funktionen fvel och med framat Euler (FE) 
%beraknar en approximation till s(t) = [x(t), y(t), θ(t)] fram till en given sluttid.
%%FÖRKORTAD
t=0.2; s=[0.9 -0.2 0.32]; b=1; aL=1; aR=0.8; wL=0.5; wR=0.8;

T=10;

n = 100;
h = T/n;

while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;
end

%%ORGINAL
t=0.2;
s=[0 0 0]; 
b=1;
aL=1;
aR=0.8;
wL=0.5;
wR=0.8;
D = (wR-wL)/b;
T = 10;
n = 100;
h = T/n;

x = 0;
y = 0;
theta = 0;

X = [];
Y = [];
Theta = [];
hold on
for i = n
    t = 0;
    x = 0;
    y = 0;
    theta = 0;
    X = [];
    Y = [];
    Theta = [];
    h=T/n;
    while t < T
        ds=fvel(t, s, b, aL, aR, wL, wR);
        %dx=s(1);
        %dy=s(2);
        %dtheta=s(3);
        t1 = t + h;
        t = t1;
        %x1 = x + h*dx;
        %x = x1;
        %y1 = y + h*dy;      
        %y = y1;
        %theta1 = theta + h*dtheta;
        %theta = theta1;
        s = s + h.*ds;
        X = [X, s(1)];
        Y = [Y, s(2)];
        Theta = [Theta, s(3)];
        %s=[x;y;theta];
    end
end
hold off
s




%% c)
x0=0;
y0=1.5;
t=0; s=[x0 y0 0]; b=1; aL=0; aR=0; wL=4; wR=2;


D=(wR-wL)/b;
T=abs(2*pi/D);

n = 100;
h = T/n;

X=[];
Y=[];

while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;

    X = cat(1, X, s(1));
    Y = cat(1, Y, s(2));
end
plot(X, Y)
axis equal
%mean(X)
%mean(Y)

% sätt x0 och y0 så att mittpunkten för cirkelrörelsen är (0, 0)
% välj sluttid så att roboten kör ett varv
% sätt deltat så att den tar 100 tidssteg
% plotta x(t) och y(t) i en plot.
% kontrollera att mittpunkten och radien blir som förväntat




%% d) 
% använd b) och c) och gör Range-Kutta 4 med samma parametrar, plotta cirklarna från c) och d) i samma plot.
% kör Euler med 1/10 så stort tidssteg och plotta igen. Slutsats?
% Noterar - RK4 är noggrannare med 100 steg än euler med 1000 steg, alltså är RK4 mycket bättre metod i (iaf i detta fall)
x0=0;
y0=1.5;
theta0=0;
s=[x0; y0; theta0]; b=1; aL=0; aR=0; wL=4; wR=2;
B = (wR+wL)/2;
D = (wR-wL)/b;
T = abs(2*pi/D);

n = 100;%Antal Euler steg
nr = n; %Antal RK steg
n2 = n*10;

tspan = [0, T];
options = odeset('RelTol',1e-8,'AbsTol',1e-8,'Refine',1);
[tv,yv] = rk4(@(t,y) fvel(t, y, b, aL, aR, wL, wR), tspan, s, nr);

%Plot
Xr = yv(:, 1);
Yr = yv(:, 2);
Thetar = yv(:, 3);
hold on
axis equal
plot(Xr, Yr)


%Euler
X=[];
Y=[];

s=[x0; y0; theta0];
h = T/n;
t=0;
while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;

    X = cat(1, X, s(1));
    Y = cat(1, Y, s(2));
end
plot(X, Y)


%Euler igen
X2=[];
Y2=[];

s=[x0; y0; theta0];
h = T/n2;
t=0;
while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;

    X2 = cat(1, X2, s(1));
    Y2 = cat(1, Y2, s(2));
end
plot(X2, Y2)


%Analytisk lösning
t=0;
aX=[];
aY=[];
h=T/10000;
while t<T
    t = t + h;
    [x,y] = analytic_solutions(t,B,D,theta0,x0,y0);
    aX = cat(1, aX, x);
    aY = cat(1, aY, y);
end
plot(aX, aY)


legend({sprintf("RK4 %.0f steg",nr),sprintf("Euler %.0f steg",n),sprintf("Euler %.0f steg",n2), "Analytisk lösning"})




%% e)
% Fel med Euler: -0.01, RK4: 3e-09
x0=0;
y0=1.5;
theta0=0;
s=[x0; y0; theta0]; b=1; aL=0; aR=0; wL=4; wR=2;
B = (wR+wL)/2;
D = (wR-wL)/b;

T=7/8*pi;

n = 100;%Antal Euler steg
nr = n; %Antal RK steg


%RK4
tspan = [0, T];
options = odeset('RelTol',1e-8,'AbsTol',1e-8,'Refine',1);
[tv,yv] = rk4(@(t,y) fvel(t, y, b, aL, aR, wL, wR), tspan, s, nr);

Xr = yv(:, 1);


%Euler
X=[];
Y=[];

s=[x0; y0; theta0];
h = T/n;
t=0;
while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;

    X = cat(1, X, s(1));
end


%Beräknar analytisk lösning
[x,y] = analytic_solutions(T,B,D,theta0,x0,y0);

%Jämför
EE = x - X(end);
ERK4 = x - Xr(end);
disp(sprintf("Absolut fel i t=%.0f med Euler n=100: %.0g",T, EE));
disp(sprintf("Absolut fel i t=%.0f med RK4 n=100: %.0g",T, ERK4));




%% f)
% beräkna numeriska lösningar, fel vid sluttiden och noggrannhetsordningar med deltat, deltat/2, deltat/4.
% - FELEN ÄR JÄTTEKONSTIGA
x0=0;
y0=1.5;
theta0=0;
s=[x0; y0; theta0]; b=1; aL=0; aR=0; wL=4; wR=2;
B = (wR+wL)/2;
D = (wR-wL)/b;

T=7/8*pi;

n = 100;
Xr=[];
X=[];
nv=[];
for i=0:2
ne = n*(2^i);%Antal steg

%RK4
tspan = [0, T];
options = odeset('RelTol',1e-8,'AbsTol',1e-8,'Refine',1);
[tv,yv] = rk4(@(t,y) fvel(t, y, b, aL, aR, wL, wR), tspan, s, ne);
Xr = cat(1, Xr, yv(end, 1));


%Euler
s=[x0; y0; theta0];
h = T/ne;
t=0;
while t<T 
    t = t + h;
    ds = fvel(t,s,b,aL,aR,wL,wR);
    s = s + ds*h;
end
X = cat(1, X, s(1));

nv = cat(1, nv, ne);
end


%Beräknar analytisk lösning
[x,y] = analytic_solutions(T,B,D,theta0,x0,y0);

%Jämför
EEv = abs(x - X);
ERK4v = abs(x - Xr);

%Beräknar noggrannhetsordning
pE=[];
for i=2:length(EEv)
    p = log(EEv(i-1)/EEv(i)) / log(2);

    pE = cat(1, pE, p);
end
pR=[];
for i=2:length(ERK4v)
    p = log(ERK4v(i-1)/ERK4v(i)) / log(2);

    pR = cat(1, pR, p);
end

EEv
ERK4v
pE
pR

hold on
plot(nv,EEv)
plot(nv,ERK4v)
title("Fel i Euler och RK4 med \Delta t, \Delta t/2 och \Delta t/4")
xlabel("n") 
ylabel("Fel") 
legend({"Euler","RK4"})
